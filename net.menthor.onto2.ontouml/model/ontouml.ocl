import 'ontouml.ecore'

package ontouml

context Class

inv extensional('The meta-attribute "isExtensional" can only be set to classes stereotyped as "collective"'): 
	isExtensional implies stereotype=ClassStereotype::Collective

inv qualityNature('The meta-attribute "qualityNature" can only be set to classes stereotyped as "quality"'): 
	not qualityNature.oclIsUndefined() implies stereotype=ClassStereotype::Quality
 
inv existence('The meta-attribute "existence" can only be set to identity providers'): 
	not existence.oclIsUndefined() implies isIdentityProviderClass()

inv classification('The meta-attribute "classification" can only be set to anti-rigid types'): 
	not classification.oclIsUndefined() implies isAntiRigid()

context Relationship

inv temporalNature('The meta-attribute "temporalNature" can only be set to relationships stereotyped as "temporal"'): 
	not temporalNature.oclIsUndefined() implies stereotype=RelationshipStereotype::Temporal

inv participationNature('The meta-attribute "participationNature" can only be set to relationships stereotyped as "participation"'): 
	not participationNature.oclIsUndefined() implies stereotype=RelationshipStereotype::Participation

context DataType

inv dimensions('The meta-attribute "dimensions" can only be set to dataTypes stereotyped as "domain"'): 
	dimensions->size()>0 implies stereotype=DataTypeStereotype::Domain

inv scale('The meta-attribute "scale" can only be set to dataTypes stereotyped as "dimension"'): 
	not scale.oclIsUndefined() implies stereotype=DataTypeStereotype::Dimension

inv measurement('The meta-attribute "measurement" can only be set to dataTypes stereotyped as "dimension"'): 
	not measurement.oclIsUndefined() implies stereotype=DataTypeStereotype::Dimension

inv ownerDomain('The meta-attribute "ownerDomain" can only be set to dataTypes stereotyped as "dimension"'): 
	not ownerDomain.oclIsUndefined() implies stereotype=DataTypeStereotype::Dimension

inv unitOfMeasure('The meta-attribute "unitOfMeasure" can only be set to dataTypes stereotyped as "dimension"'): 
	not unitOfMeasure.oclIsUndefined() implies stereotype=DataTypeStereotype::Dimension

inv lowerBoundRegion('The meta-attribute "lowerBoundRegion" can only be set to dataTypes stereotyped as "dimension"'): 
	not lowerBoundRegion.oclIsUndefined() implies stereotype=DataTypeStereotype::Dimension

inv upperBoundRegion('The meta-attribute "upperBoundRegion" can only be set to dataTypes stereotyped as "dimension"'): 
	not upperBoundRegion.oclIsUndefined() implies stereotype=DataTypeStereotype::Dimension

inv structure('The meta-attribute "structure" can only be set to dataTypes stereotyped as "enumeration"'): 
	not structure.oclIsUndefined() implies stereotype=DataTypeStereotype::Enumeration

inv literals('The meta-attribute "literals" can only be set to dataTypes stereotyped as "enumeration"'): 
	literals->size()>0 implies stereotype=DataTypeStereotype::Enumeration

context Generalization

inv specializeRelationship('A relationship can only be specialized by another relationship'): 
	general.oclIsKindOf(Relationship) implies specific.oclIsKindOf(Relationship)

inv generalizeRelationship('A relationship can only be generalized by another relationship'): 
	specific.oclIsKindOf(Relationship) implies general.oclIsKindOf(Relationship)

inv specializeClass('A class can only be specialized by another class'): 
	general.oclIsKindOf(Class) implies specific.oclIsKindOf(Class)

inv generalizeClass('A class can only be generalized by another class'): 
	specific.oclIsKindOf(Class) implies general.oclIsKindOf(Class)

inv specializeDataType('A dataType can only be specialized by another dataType'):
	general.oclIsKindOf(DataType) implies specific.oclIsKindOf(DataType)

inv generalizeDataType('A dataType can only be generalized by another dataType'): 
	specific.oclIsKindOf(DataType) implies general.oclIsKindOf(DataType)

context Classifier
--
--inv noAncestorCycle('A Classifier cannot be an ancestor of itself.'): 
--	self.allParents()->excludes(self)
--
--inv noDescendantCycle('A Classifier cannot be a descendant of itself.'): 
--	self.allChildren()->excludes(self)

inv classifierNoTwoDisjParents('A Classifier cannot specialize two or more disjoint parents simultaneously.'):
	not self.parents()->exists(p1,p2| p1<>p2 implies p1.isDisjointOf(p2))

endpackage
